name: E2E Tests (Detox)

on:
  pull_request:
    branches: [beta]
    types: [opened, synchronize, reopened]

jobs:
  e2e-ios:
    runs-on: macos-14 # Use macos-14 for more consistent Xcode versions
    continue-on-error: true # Don't block PRs if tests fail
    timeout-minutes: 45 # Prevent hanging builds
    env:
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      ENVIROINMENT: ${{secrets.ENVIROINMENT}}
      INTERCOM_APP_KEY: ${{secrets.INTERCOM_APP_KEY}}
      WALLET_CONNECT_PROJECTID: ${{secrets.WALLET_CONNECT_PROJECTID}}
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
      WEB3_AUTH_CLIENT_ID: ${{ secrets.WEB3_AUTH_CLIENT_ID }}
      CI: true
      NODE_ENV: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Select Xcode version
        run: |
          echo "=== Selecting Xcode 16 for iOS 18 SDK ==="
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          xcodebuild -version

      - name: Configure npm
        run: |
          echo "@cypherd-io:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .env file
        run: |
          echo "WALLET_CONNECT_PROJECTID=${{ secrets.WALLET_CONNECT_PROJECTID }}" >> .env
          echo "INTERCOM_APP_KEY=${{ secrets.INTERCOM_APP_KEY }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "ENVIROINMENT=${{ secrets.ENVIROINMENT }}" >> .env
          echo "HELIUS_API_KEY=${{ secrets.HELIUS_API_KEY }}" >> .env
          echo "WEB3_AUTH_CLIENT_ID=${{ secrets.WEB3_AUTH_CLIENT_ID }}" >> .env

      - name: Check Xcode version and available simulators
        run: |
          echo "=== Xcode Information ==="
          xcodebuild -version
          echo ""
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices iOS available --json | jq -r '.devices | to_entries[] | .key as $os | .value[] | select(.isAvailable == true) | "\($os): \(.name) (\(.udid))"'
          echo ""
          echo "=== SDK Information ==="
          xcodebuild -showsdks | grep iOS

      - name: Fix Node.js path for React Native
        run: |
          echo "=== Fixing Node.js path for React Native scripts ==="
          echo "Current Node.js path: $(which node)"
          echo "Node.js version: $(node --version)"

          # Create symlink to ensure React Native scripts can find Node
          sudo mkdir -p /Users/local/.nvm/versions/node/v18.17.1/bin/
          sudo ln -sf $(which node) /Users/local/.nvm/versions/node/v18.17.1/bin/node || true

          # Also update .xcode.env files to use correct Node path
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local

          echo "✅ Node.js path configured for React Native"

      - name: Clear CocoaPods cache
        run: |
          echo "=== Clearing CocoaPods cache ==="
          pod cache clean --all || true
          cd ios
          rm -f Podfile.lock || true

      - name: Install CocoaPods dependencies
        run: |
          echo "=== Installing CocoaPods dependencies ==="
          cd ios
          pod install --repo-update --verbose

      - name: Verify deployment targets
        run: |
          echo "=== Verifying iOS deployment targets ==="
          cd ios
          # Check if any pods still have deployment target < 15.0
          PODS_WITH_OLD_TARGET=$(grep -r "IPHONEOS_DEPLOYMENT_TARGET = 1[0-4]\." Pods/Pods.xcodeproj/project.pbxproj || echo "None found")
          if [ "$PODS_WITH_OLD_TARGET" != "None found" ]; then
            echo "⚠️  Found pods with old deployment targets:"
            echo "$PODS_WITH_OLD_TARGET"
          else
            echo "✅ All pods have deployment target >= 15.0"
          fi

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Install applesimutils
        run: |
          brew tap wix/brew
          brew install applesimutils

      - name: Setup iOS Simulator
        run: |
          echo "=== Setting up iOS Simulator ==="

          # Find the best available iOS simulator for Detox (iPhone 16 preferred)
          echo "Looking for iPhone 16 simulators..."
          IPHONE16_SIMULATOR=$(xcrun simctl list devices iPhone available | grep "iPhone 16" | grep -v "Plus\|Pro" | head -1 | sed 's/^[[:space:]]*//' || echo "")

          if [ -n "$IPHONE16_SIMULATOR" ]; then
            echo "✅ Found iPhone 16 simulator: $IPHONE16_SIMULATOR"
            DEVICE_NAME="iPhone 16"
          else
            echo "No iPhone 16 found, checking for iPhone 15 with specific iOS version..."
            # Fallback to iPhone 15 with explicit OS version
            IPHONE15_SIMULATOR=$(xcrun simctl list devices iPhone available | grep "iPhone 15" | grep -v "Plus\|Pro" | head -1 | sed 's/^[[:space:]]*//' || echo "")
            
            if [ -n "$IPHONE15_SIMULATOR" ]; then
              echo "Found iPhone 15 simulator: $IPHONE15_SIMULATOR"
              DEVICE_NAME="iPhone 15"
              
              # Update Detox config to use iPhone 15 with specific OS
              echo "Updating Detox config for iPhone 15..."
              sed -i.bak 's/iPhone 16/iPhone 15/g' .detoxrc.js
              sed -i.bak 's/name=iPhone 16/name=iPhone 15,OS=17.5/g' .detoxrc.js
            else
              echo "No suitable iPhone simulator found, creating one..."
              # Find latest available iOS runtime
              RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | grep -E "18\.|17\.|16\." | head -1 | sed 's/.*iOS \([0-9\.]*\).*/\1/')
              if [ -n "$RUNTIME" ]; then
                echo "Creating iPhone 16 with iOS runtime: $RUNTIME"
                xcrun simctl create "iPhone 16" "iPhone 16" "iOS$RUNTIME" || true
                DEVICE_NAME="iPhone 16"
              else
                echo "❌ No suitable iOS runtime found"
                exit 1
              fi
            fi
          fi

          echo ""
          echo "=== Selected device: $DEVICE_NAME ==="
          echo "=== Available simulators after setup ==="
          xcrun simctl list devices available | grep -E "iPhone (15|16)" | head -10

      - name: Create e2e environment file
        run: |
          echo "TEST_SEED_PHRASE=${{ secrets.E2E_TEST_SEED_PHRASE }}" > e2e/.env.test
        env:
          E2E_TEST_SEED_PHRASE: ${{ secrets.E2E_TEST_SEED_PHRASE }}

      - name: Build iOS app for testing
        run: |
          echo "=== Starting iOS Build ==="
          echo "Current directory: $(pwd)"
          echo "Available iOS simulators:"
          xcrun simctl list devices iOS --json
          echo "=== Building with Detox ==="
          detox build --configuration ios.sim.debug --verbose
        timeout-minutes: 20

      - name: Run E2E Tests - iOS
        run: npm run e2e:test:ios
        continue-on-error: true

      - name: Clean up .env file
        if: always()
        run: rm -f .env

      - name: Upload iOS test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-ios-results
          path: |
            e2e/artifacts/
            detox_*.log
            ios/build/Build/Logs/
          retention-days: 7

      - name: Report E2E Test Results
        if: always()
        run: |
          echo "## E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **iOS E2E Tests Completed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following test suites were executed:" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 App Launch Test" >> $GITHUB_STEP_SUMMARY
          echo "- 👋 Onboarding Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 📲 Import Wallet Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 💳 Load Card Flow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** E2E tests are informational and do not block PR merging." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Check the job logs above for detailed test results._" >> $GITHUB_STEP_SUMMARY
