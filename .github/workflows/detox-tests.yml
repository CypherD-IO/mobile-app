name: E2E Tests (Detox)

on:
  pull_request:
    branches: [beta]
    types: [opened, synchronize, reopened]

jobs:
  e2e-ios:
    runs-on: macos-14 # Use macos-14 for more consistent Xcode versions
    timeout-minutes: 45 # Prevent hanging builds
    env:
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      ENVIROINMENT: ${{secrets.ENVIROINMENT}}
      INTERCOM_APP_KEY: ${{secrets.INTERCOM_APP_KEY}}
      WALLET_CONNECT_PROJECTID: ${{secrets.WALLET_CONNECT_PROJECTID}}
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
      WEB3_AUTH_CLIENT_ID: ${{ secrets.WEB3_AUTH_CLIENT_ID }}
      CI: true
      NODE_ENV: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Select Xcode version
        run: |
          echo "=== Selecting Xcode 16 for iOS 18 SDK ==="
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          xcodebuild -version

      - name: Configure npm
        run: |
          echo "@cypherd-io:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .env file
        run: |
          echo "WALLET_CONNECT_PROJECTID=${{ secrets.WALLET_CONNECT_PROJECTID }}" >> .env
          echo "INTERCOM_APP_KEY=${{ secrets.INTERCOM_APP_KEY }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "ENVIROINMENT=${{ secrets.ENVIROINMENT }}" >> .env
          echo "HELIUS_API_KEY=${{ secrets.HELIUS_API_KEY }}" >> .env
          echo "WEB3_AUTH_CLIENT_ID=${{ secrets.WEB3_AUTH_CLIENT_ID }}" >> .env

      - name: Check Xcode version and available simulators
        run: |
          echo "=== Xcode Information ==="
          xcodebuild -version
          echo ""
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices iOS available --json | jq -r '.devices | to_entries[] | .key as $os | .value[] | select(.isAvailable == true) | "\($os): \(.name) (\(.udid))"'
          echo ""
          echo "=== SDK Information ==="
          xcodebuild -showsdks | grep iOS

      - name: Fix Node.js path for React Native
        run: |
          echo "=== Fixing Node.js path for React Native scripts ==="
          echo "Current Node.js path: $(which node)"
          echo "Node.js version: $(node --version)"

          # Create symlink to ensure React Native scripts can find Node
          sudo mkdir -p /Users/local/.nvm/versions/node/v18.17.1/bin/
          sudo ln -sf $(which node) /Users/local/.nvm/versions/node/v18.17.1/bin/node || true

          # Also update .xcode.env files to use correct Node path
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local

          echo "✅ Node.js path configured for React Native"

      - name: Clear CocoaPods cache
        run: |
          echo "=== Clearing CocoaPods cache ==="
          pod cache clean --all || true
          cd ios
          rm -f Podfile.lock || true

      - name: Install CocoaPods dependencies
        run: |
          echo "=== Installing CocoaPods dependencies ==="
          cd ios
          pod install --repo-update --verbose

      - name: Verify deployment targets
        run: |
          echo "=== Verifying iOS deployment targets ==="
          cd ios
          # Check if any pods still have deployment target < 15.0
          PODS_WITH_OLD_TARGET=$(grep -r "IPHONEOS_DEPLOYMENT_TARGET = 1[0-4]\." Pods/Pods.xcodeproj/project.pbxproj || echo "None found")
          if [ "$PODS_WITH_OLD_TARGET" != "None found" ]; then
            echo "⚠️  Found pods with old deployment targets:"
            echo "$PODS_WITH_OLD_TARGET"
          else
            echo "✅ All pods have deployment target >= 15.0"
          fi

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Install applesimutils
        run: |
          brew tap wix/brew
          brew install applesimutils

      - name: Setup iOS Simulator
        run: |
          echo "=== Setting up iOS Simulator for E2E Tests ==="

          # For CI, we need iPhone 16 with iOS 18.x support (required for iOS 18 SDK)
          echo "Looking for iPhone 16 simulators..."
          IPHONE16_SIMULATOR=$(xcrun simctl list devices iPhone available | grep "iPhone 16" | grep -v "Plus\|Pro" | head -1 | sed 's/^[[:space:]]*//' || echo "")

          if [ -n "$IPHONE16_SIMULATOR" ]; then
            echo "✅ Found iPhone 16 simulator: $IPHONE16_SIMULATOR"
            DEVICE_NAME="iPhone 16"
            DEVICE_OS="18.x"
          else
            echo "No iPhone 16 found, checking for iPhone 15..."
            IPHONE15_SIMULATOR=$(xcrun simctl list devices iPhone available | grep "iPhone 15" | grep -v "Plus\|Pro" | head -1 | sed 's/^[[:space:]]*//' || echo "")
            
            if [ -n "$IPHONE15_SIMULATOR" ]; then
              echo "Found iPhone 15 simulator: $IPHONE15_SIMULATOR"
              DEVICE_NAME="iPhone 15"
              DEVICE_OS="17.5"
              
              # Update Detox config for iPhone 15 fallback
              sed -i.bak 's/iPhone 16/iPhone 15/g' .detoxrc.js
              echo "⚠️ Using iPhone 15 fallback - may not support iOS 18 SDK features"
            else
              echo "Creating iPhone 16 simulator..."
              # Find a suitable iOS runtime for iPhone 16
              RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | grep -E "18\.|17\." | head -1 | sed 's/.*iOS \([0-9\.]*\).*/\1/')
              if [ -n "$RUNTIME" ]; then
                echo "Creating iPhone 16 with iOS runtime: $RUNTIME"
                xcrun simctl create "iPhone 16" "iPhone 16" "iOS$RUNTIME" || true
                DEVICE_NAME="iPhone 16"
                DEVICE_OS="$RUNTIME"
              else
                echo "❌ No suitable iOS runtime found"
                exit 1
              fi
            fi
          fi

          echo ""
          echo "=== Selected device: $DEVICE_NAME with iOS $DEVICE_OS ==="
          echo "=== Available simulators after setup ==="
          xcrun simctl list devices available | grep -E "iPhone (15|16)" | head -10

          # Pre-boot the simulator to speed up tests
          echo "Pre-booting simulator..."
          DEVICE_ID=$(xcrun simctl list devices | grep "$DEVICE_NAME" | grep -v "unavailable" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
          if [ -n "$DEVICE_ID" ]; then
            xcrun simctl boot "$DEVICE_ID" || echo "Device might already be booted"
            echo "✅ Simulator pre-booted successfully"
          fi

      - name: Optimize CI Environment for E2E Tests
        run: |
          echo "=== CI Environment Optimizations ==="

          # Set CI flag for Detox configuration
          echo "CI=true" >> $GITHUB_ENV

          # Increase file descriptor limits for CI
          ulimit -n 4096 || echo "Could not increase file descriptor limit"

          # Clear any old simulators to free up resources
          echo "Cleaning up old simulators..."
          xcrun simctl delete unavailable || echo "No unavailable simulators to delete"

          # Show system resources
          echo "Available system resources:"
          echo "  - CPU cores: $(sysctl -n hw.ncpu)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
          echo "  - Disk space: $(df -h . | tail -1 | awk '{print $4}') available"

          echo "✅ CI environment optimized"

      - name: Build iOS app for testing (with retry)
        run: |
          echo "=== Starting iOS Build with Retry Logic ==="

          # Function to retry build on failure
          retry_build() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Build attempt $attempt of $max_attempts..."
              
              if detox build --configuration ios.sim.debug --verbose; then
                echo "✅ Build successful on attempt $attempt"
                return 0
              else
                echo "❌ Build failed on attempt $attempt"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "Cleaning up before retry..."
                  cd ios && rm -rf build && cd ..
                  sleep 30  # Wait before retry
                fi
                
                attempt=$((attempt + 1))
              fi
            done
            
            echo "❌ Build failed after $max_attempts attempts"
            return 1
          }

          retry_build
        timeout-minutes: 25

      - name: Create e2e environment file
        run: |
          echo "TEST_SEED_PHRASE=${{ secrets.E2E_TEST_SEED_PHRASE }}" > e2e/.env.test
          # Suppress Sentry warnings in CI
          echo "CI=true" >> .env
          echo "IS_TESTING='true'" >> .env
        env:
          E2E_TEST_SEED_PHRASE: ${{ secrets.E2E_TEST_SEED_PHRASE }}

      - name: Start Metro Bundler for E2E Tests
        run: |
          echo "=== Starting Metro Bundler for E2E Tests ==="

          # Start Metro bundler in background
          npx react-native start --reset-cache &
          METRO_PID=$!
          echo "Metro PID: $METRO_PID"
          echo $METRO_PID > metro.pid

          # Wait for Metro to be ready
          echo "Waiting for Metro bundler to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8081/status >/dev/null 2>&1; then
              echo "✅ Metro bundler is ready"
              break
            fi
            echo "Waiting for Metro... ($i/30)"
            sleep 2
          done

          # Verify Metro is running
          if ! curl -s http://localhost:8081/status >/dev/null 2>&1; then
            echo "❌ Metro bundler failed to start"
            exit 1
          fi

          echo "✅ Metro bundler started successfully"

      - name: Prepare iOS Simulator for E2E Tests
        run: |
          echo "=== Preparing iOS Simulator ==="

          # Wait a bit more for Metro to stabilize
          sleep 10

          # Pre-warm the bundle by hitting the bundle URL
          echo "Pre-warming React Native bundle..."
          curl -s "http://localhost:8081/index.bundle?platform=ios&dev=true" > /dev/null || echo "Bundle pre-warm attempted"

          # Ensure simulator is ready
          DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 16" | grep "Booted" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
          if [ -n "$DEVICE_ID" ]; then
            echo "✅ Simulator ready: $DEVICE_ID"
          else
            echo "⚠️ No booted iPhone 16 simulator found"
          fi

      - name: Run E2E Tests - iOS
        run: |
          echo "=== Starting E2E Tests ==="

          # Set CI environment variable for lighter resets
          export CI=true
          export IS_TESTING=true

          # Verify Metro is still running
          if ! curl -s http://localhost:8081/status >/dev/null 2>&1; then
            echo "❌ Metro bundler not running, restarting..."
            npx react-native start --reset-cache &
            sleep 15
          fi

          # Run tests with increased timeout and better error handling
          set +e  # Don't exit immediately on error so we can capture logs
          npm run e2e:test:ios
          TEST_EXIT_CODE=$?
          set -e  # Re-enable exit on error

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ E2E tests failed with exit code: $TEST_EXIT_CODE"
            
            # Capture Metro logs
            echo "=== Metro bundler status ==="
            curl -s http://localhost:8081/status || echo "Metro not responding"
            
            # Capture simulator logs for debugging
            echo "=== Capturing simulator logs ==="
            DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 1" | grep "Booted" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -n "$DEVICE_ID" ]; then
              xcrun simctl spawn "$DEVICE_ID" log show --predicate 'process == "Cypherd"' --last 5m > simulator_logs.txt || echo "Could not capture logs"
            fi
            
            # Take final screenshot
            if [ -n "$DEVICE_ID" ]; then
              xcrun simctl io "$DEVICE_ID" screenshot final_state.png || echo "Could not take screenshot"
            fi
            
            # Exit with the original test failure code
            exit $TEST_EXIT_CODE
          else
            echo "✅ E2E tests passed successfully"
          fi
        timeout-minutes: 35

      - name: Stop Metro Bundler
        if: always()
        run: |
          echo "=== Stopping Metro Bundler ==="
          if [ -f metro.pid ]; then
            METRO_PID=$(cat metro.pid)
            kill $METRO_PID 2>/dev/null || echo "Metro process already stopped"
            rm metro.pid
          fi
          # Also kill any remaining Metro processes
          pkill -f "react-native start" || echo "No Metro processes found"

      - name: Clean up .env file
        if: always()
        run: rm -f .env

      - name: Upload iOS test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-ios-results
          path: |
            e2e/artifacts/
            detox_*.log
            ios/build/Build/Logs/
            simulator_logs.txt
            final_state.png
            e2e/screenshots/
          retention-days: 7

      - name: Report E2E Test Results
        if: always()
        run: |
          echo "## E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if the previous step failed
          if [ "${{ job.status }}" = "failure" ]; then
            echo "❌ **iOS E2E Tests FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **This PR cannot be merged until E2E tests pass.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details and fix the failing tests." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **iOS E2E Tests PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 All E2E tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following test suites were executed:" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 App Launch Test" >> $GITHUB_STEP_SUMMARY
          echo "- 👋 Onboarding Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 📲 Import Wallet Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 💳 Load Card Flow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Check the job logs above for detailed test results._" >> $GITHUB_STEP_SUMMARY
