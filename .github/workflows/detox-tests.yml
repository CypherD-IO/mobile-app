name: E2E Tests (Detox)

on:
  pull_request:
    branches: [beta]
    types: [opened, synchronize, reopened]

jobs:
  e2e-ios:
    runs-on: macos-14 # Use macos-14 for more consistent Xcode versions
    timeout-minutes: 45 # Prevent hanging builds
    env:
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      ENVIROINMENT: ${{secrets.ENVIROINMENT}}
      INTERCOM_APP_KEY: ${{secrets.INTERCOM_APP_KEY}}
      WALLET_CONNECT_PROJECTID: ${{secrets.WALLET_CONNECT_PROJECTID}}
      HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
      WEB3_AUTH_CLIENT_ID: ${{ secrets.WEB3_AUTH_CLIENT_ID }}
      CI: true
      IS_TESTING: 'true'
      NODE_ENV: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache iOS Build
        uses: actions/cache@v4
        with:
          path: |
            ios/build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-ios-build-${{ hashFiles('ios/**/*.{h,m,swift}', 'src/**/*.{js,ts,tsx}', 'package.json', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ios-build-

      - name: Select Xcode version
        run: |
          echo "=== Selecting Xcode 16 for iOS 18 SDK ==="
          sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer || \
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          xcodebuild -version

      - name: Configure npm
        run: |
          echo "@cypherd-io:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: |
          echo "=== Installing Node.js dependencies ==="
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.cache-complete" ]; then
            echo "Cache miss or incomplete - installing dependencies..."
            # Use npm ci with optimizations for speed
            npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund --silent
            touch node_modules/.cache-complete
          else
            echo "✅ Dependencies restored from cache - skipping npm install"
            ls -la node_modules/.cache-complete
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .env file
        run: |
          echo "WALLET_CONNECT_PROJECTID=${{ secrets.WALLET_CONNECT_PROJECTID }}" >> .env
          echo "INTERCOM_APP_KEY=${{ secrets.INTERCOM_APP_KEY }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "ENVIROINMENT=${{ secrets.ENVIROINMENT }}" >> .env
          echo "HELIUS_API_KEY=${{ secrets.HELIUS_API_KEY }}" >> .env
          echo "WEB3_AUTH_CLIENT_ID=${{ secrets.WEB3_AUTH_CLIENT_ID }}" >> .env

      - name: Check Xcode version and available simulators
        run: |
          echo "=== Xcode Information ==="
          xcodebuild -version
          echo ""
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices iOS available --json | jq -r '.devices | to_entries[] | .key as $os | .value[] | select(.isAvailable == true) | "\($os): \(.name) (\(.udid))"'
          echo ""
          echo "=== SDK Information ==="
          xcodebuild -showsdks | grep iOS

      - name: Fix Node.js path for React Native
        run: |
          echo "=== Fixing Node.js path for React Native scripts ==="
          echo "Current Node.js path: $(which node)"
          echo "Node.js version: $(node --version)"

          # Create symlink to ensure React Native scripts can find Node
          sudo mkdir -p /Users/local/.nvm/versions/node/v18.17.1/bin/
          sudo ln -sf $(which node) /Users/local/.nvm/versions/node/v18.17.1/bin/node || true

          # Also update .xcode.env files to use correct Node path
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local

          echo "✅ Node.js path configured for React Native"

      - name: Install Ruby gems (missing step)
        run: |
          echo "=== Installing Ruby gems (this was the missing step!) ==="
          echo "Ruby version: $(ruby --version)"
          echo "Bundler version: $(bundle --version)"

          # Remove Gemfile.lock to avoid version conflicts between environments
          # Local: Ruby 2.6 + Bundler 1.17  vs  CI: Ruby 3.3 + Bundler 2.6
          # Each environment generates its own compatible lockfile
          rm -f Gemfile.lock
          echo "Removed old Gemfile.lock to avoid Ruby/Bundler version conflicts"

          # Use faster installation method
          echo "Installing CocoaPods globally with optimizations..."
          gem install cocoapods -v '~> 1.15.0' --no-document --quiet
          gem install activesupport -v '~> 7.0.8' --no-document --quiet

          # Verify CocoaPods is available  
          pod --version
          echo "✅ CocoaPods $(pod --version) ready with VisionOS support"

      - name: Install CocoaPods dependencies
        run: |
          echo "=== Installing CocoaPods dependencies ==="
          cd ios

          # Check if pods are cached and valid
          if [ -d "Pods" ] && [ -f "Pods/.cache-complete" ] && [ -f "Podfile.lock" ] && [ "Podfile.lock" -nt "Podfile" ]; then
            echo "✅ CocoaPods restored from cache and up-to-date - skipping pod install"
            pod --version
          else
            echo "Cache miss or Podfile changed - installing pods..."
            
            # Only remove Podfile.lock if we're doing a fresh install
            rm -f Podfile.lock || true
            
            # Optimized pod install
            echo "Using CocoaPods $(pod --version) with VisionOS support"
            
            if ! pod install \
              --repo-update \
              --clean-install \
              --silent; then
              
              echo "❌ Pod install failed. Checking for common issues..."
              
              # Check for VisionOS compatibility issues
              if grep -r "visionos" ../node_modules/*/RN*.podspec 2>/dev/null || 
                 grep -r "visionos" ../node_modules/@*/*/RN*.podspec 2>/dev/null; then
                echo "⚠️ Found VisionOS references in podspecs"
                echo "CocoaPods version: $(pod --version)"
                echo "This version should support VisionOS (1.13+ required)"
              fi
              
              exit 1
            fi
            
            touch Pods/.cache-complete
            echo "✅ Pod install completed successfully"
          fi

      - name: Verify deployment targets
        run: |
          echo "=== Verifying iOS deployment targets ==="
          cd ios
          # Check if any pods still have deployment target < 15.0
          PODS_WITH_OLD_TARGET=$(grep -r "IPHONEOS_DEPLOYMENT_TARGET = 1[0-4]\." Pods/Pods.xcodeproj/project.pbxproj || echo "None found")
          if [ "$PODS_WITH_OLD_TARGET" != "None found" ]; then
            echo "⚠️  Found pods with old deployment targets:"
            echo "$PODS_WITH_OLD_TARGET"
          else
            echo "✅ All pods have deployment target >= 15.0"
          fi

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Install applesimutils
        run: |
          brew tap wix/brew
          brew install applesimutils

      - name: Optimize CI Environment for E2E Tests
        run: |
          echo "=== CI Environment Optimizations ==="

          # Set environment variables for performance
          echo "CI_OPTIMIZED=true" >> $GITHUB_ENV
          echo "DETOX_DISABLE_LOGS=true" >> $GITHUB_ENV
          echo "RCT_NO_LAUNCH_PACKAGER=1" >> $GITHUB_ENV

          # Create Detox directories to prevent lockfile issues
          echo "Setting up Detox environment..."
          mkdir -p ~/Library/Detox
          chmod 755 ~/Library/Detox

          # Let Detox create the device registry with proper structure
          # Don't pre-create device.registry.json - let Detox initialize it correctly
          echo "✅ Detox directory prepared (letting Detox create registry with correct structure)"

          # Increase file descriptor limits for CI
          ulimit -n 4096 || echo "Could not increase file descriptor limit"

          # Clean up any old processes that might interfere
          echo "Cleaning up background processes..."
          pkill -f "Simulator" || echo "No Simulator processes to kill"
          pkill -f "node.*react-native" || echo "No React Native processes to kill"
          pkill -f "Metro" || echo "No Metro processes to kill"

          # Clean up old simulators to free up resources
          echo "Cleaning up old simulators..."
          xcrun simctl delete unavailable || echo "No unavailable simulators to delete"

          # Delete old simulator logs
          rm -rf ~/Library/Logs/CoreSimulator/* || echo "Could not clean simulator logs"

          # Show system resources
          echo "Available system resources:"
          echo "  - CPU cores: $(sysctl -n hw.ncpu)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
          echo "  - Disk space: $(df -h . | tail -1 | awk '{print $4}') available"

          echo "✅ CI environment optimized for performance"

      - name: Pre-build App for Detox (prevents parallel build conflicts)
        run: |
          echo "=== Pre-building App to Prevent Parallel Conflicts ==="

          # Check if app already exists
          APP_PATH="ios/build/Build/Products/Debug-iphonesimulator/Cypherd.app"
          if [ -f "$APP_PATH/Info.plist" ]; then
            echo "✅ App binary already exists, skipping build"
            ls -la "$APP_PATH"
          else
            echo "App binary not found, running single build to prevent parallel conflicts..."
            # Use detox build once to avoid multiple workers building simultaneously
            npx detox build --configuration ios.sim.debug
            
            if [ -f "$APP_PATH/Info.plist" ]; then
              echo "✅ App built successfully"
            else
              echo "❌ Build failed - app binary still not found"
              exit 1
            fi
          fi
        timeout-minutes: 8

      - name: Create e2e environment file
        run: |
          echo "TEST_SEED_PHRASE=${{ secrets.E2E_TEST_SEED_PHRASE }}" > e2e/.env.test
          # Create .env file for React Native Config with CI flags
          echo "CI=true" >> .env
          echo "IS_TESTING='true'" >> .env
        env:
          E2E_TEST_SEED_PHRASE: ${{ secrets.E2E_TEST_SEED_PHRASE }}

      - name: Verify environment variables
        run: |
          echo "=== Verifying IS_TESTING Environment Variable ==="
          echo "Shell environment IS_TESTING: [$IS_TESTING]"
          echo "Shell environment type check:"
          if [ "$IS_TESTING" = "true" ]; then
            echo "✅ IS_TESTING equals string 'true'"
          else
            echo "❌ IS_TESTING does not equal string 'true', value: [$IS_TESTING]"
          fi

          echo ""
          echo ".env file contents:"
          cat .env | grep IS_TESTING || echo "IS_TESTING not found in .env"

          echo ""
          echo "✅ Environment verification completed"

      - name: Start Metro Bundler for E2E Tests
        run: |
          echo "=== Starting Metro Bundler for E2E Tests ==="

          # Start Metro bundler in background
          npx react-native start --reset-cache &
          METRO_PID=$!
          echo "Metro PID: $METRO_PID"
          echo $METRO_PID > metro.pid

          # Wait for Metro to be ready
          echo "Waiting for Metro bundler to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8081/status >/dev/null 2>&1; then
              echo "✅ Metro bundler is ready"
              break
            fi
            echo "Waiting for Metro... ($i/30)"
            sleep 2
          done

          # Verify Metro is running
          if ! curl -s http://localhost:8081/status >/dev/null 2>&1; then
            echo "❌ Metro bundler failed to start"
            exit 1
          fi

          echo "✅ Metro bundler started successfully"

      - name: Prepare iOS Simulator for E2E Tests
        run: |
          echo "=== Preparing Metro Bundler for E2E Tests ==="

          # Wait a bit more for Metro to stabilize
          sleep 10

          # Pre-warm the bundle by hitting the bundle URL
          echo "Pre-warming React Native bundle..."
          curl -s "http://localhost:8081/index.bundle?platform=ios&dev=true" > /dev/null || echo "Bundle pre-warm attempted"

          echo "✅ Metro bundler prepared for tests"

      - name: Run E2E Tests - Time-Optimized Strategy
        run: |
          echo "=== Running E2E Tests with Time-Optimized Strategy ==="
          echo "🚀 Optimized for 45-minute workflow timeout"

          # Set up test environment with optimizations
          export DETOX_ARTIFACTS_LOCATION="e2e/artifacts"
          export DETOX_CAPTURE_VIEW_HIERARCHY="enabled"
          export DETOX_TAKE_SCREENSHOTS="failing"
          export DETOX_RECORD_VIDEOS="none"  # Disable video recording to save time
          export DETOX_DISABLE_LOGS="true"   # Reduce logging overhead

          mkdir -p e2e/artifacts/{screenshots,logs}

          # Verify Metro is running
          if ! curl -s http://localhost:8081/status >/dev/null 2>&1; then
            echo "❌ Metro bundler not running, restarting..."
            npx react-native start --reset-cache &
            sleep 10
          fi

          # Monitor system resources (abbreviated for speed)
          echo "=== CI System Resources ==="
          echo "CPU: $(sysctl -n hw.ncpu) cores, Memory: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024}')GB, Disk: $(df -h . | tail -1 | awk '{print $4}')"

          # Time-optimized execution strategy
          TEST_EXIT_CODE=1

          # Strategy 1: Moderate parallelization (2 workers) - Conservative approach
          echo "🔄 Strategy 1: 2 workers (8-minute timeout)"
          export DETOX_MAX_WORKERS=2
          set +e

          timeout 480 npm run e2e:test:ios  # 8 minutes
          TEST_EXIT_CODE=$?

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "✅ Tests passed with 2 workers!"
          elif [ $TEST_EXIT_CODE -eq 124 ]; then
            echo "⏰ Strategy 1 timed out, trying sequential..."
            
            # Quick cleanup before fallback
            pkill -f "jest.*e2e" || echo "No Jest processes"
            pkill -f "node.*detox" || echo "No Detox processes"
            sleep 3
            
            # Strategy 2: Sequential execution (1 worker) - Reliable fallback
            echo "🔄 Strategy 2: Sequential execution (12-minute timeout)"
            export DETOX_MAX_WORKERS=1
            
            timeout 720 npm run e2e:test:ios  # 12 minutes
            TEST_EXIT_CODE=$?
            
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "✅ Tests passed with sequential execution!"
            elif [ $TEST_EXIT_CODE -eq 124 ]; then
              echo "⏰ Strategy 2 also timed out"
              TEST_EXIT_CODE=1
            else
              echo "❌ Strategy 2 failed with exit code: $TEST_EXIT_CODE"
            fi
          else
            echo "❌ Strategy 1 failed with exit code: $TEST_EXIT_CODE"
            echo "Skipping fallback due to non-timeout failure"
          fi

          set -e

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ Tests failed. Exit code: $TEST_EXIT_CODE"
            
            # Quick artifact capture
            echo "=== Capturing artifacts ==="
            curl -s http://localhost:8081/status || echo "Metro: unknown"
            
            xcrun simctl list devices | grep "Booted" | head -1 | sed 's/.*(\([^)]*\)).*/\1/' | while read DEVICE_ID; do
              if [ -n "$DEVICE_ID" ]; then
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                xcrun simctl io "$DEVICE_ID" screenshot "e2e/artifacts/screenshots/final_${TIMESTAMP}.png" 2>/dev/null || echo "No screenshot"
              fi
            done
            
            if [ -d "e2e/artifacts" ]; then
              SCREENSHOT_COUNT=$(find e2e/artifacts -name "*.png" 2>/dev/null | wc -l)
              LOG_COUNT=$(find e2e/artifacts -name "*.log" 2>/dev/null | wc -l)
              echo "📸 Screenshots: ${SCREENSHOT_COUNT}, 📝 Logs: ${LOG_COUNT}"
            fi
            
            exit $TEST_EXIT_CODE
          else
            echo "✅ E2E tests completed successfully!"
            echo "🎉 Strategy: $(echo $DETOX_MAX_WORKERS) worker(s)"
          fi
        timeout-minutes: 22

      - name: Stop Metro Bundler
        if: always()
        run: |
          echo "=== Stopping Metro Bundler and cleaning up processes ==="

          # Kill Metro bundler
          if [ -f metro.pid ]; then
            METRO_PID=$(cat metro.pid)
            kill $METRO_PID 2>/dev/null || echo "Metro process already stopped"
            rm metro.pid
          fi

          # Kill any remaining Metro processes
          pkill -f "react-native start" || echo "No Metro processes found"

          # Kill any hanging Jest processes
          pkill -f "jest.*e2e" || echo "No Jest E2E processes found"

          # Kill any hanging Node processes related to testing
          pkill -f "node.*detox" || echo "No Detox Node processes found"

          # Clean up Detox lockfiles to prevent future issues
          echo "Cleaning up Detox lockfiles..."
          rm -f ~/Library/Detox/*.lock || echo "No Detox lockfiles to clean"
          rm -f ~/Library/Detox/device.registry.json.lock || echo "No device registry lockfile"

          # Give processes time to clean up
          sleep 2

          echo "✅ Process cleanup completed"

      - name: Clean up .env file
        if: always()
        run: rm -f .env

      - name: Generate detailed test report
        if: always()
        run: |
          echo "=== Generating detailed test report ==="

          # Create a detailed report file
          REPORT_FILE="e2e/artifacts/test_report.md"
          mkdir -p e2e/artifacts

          echo "# E2E Test Report" > $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "**Run ID:** ${{ github.run_number }}" >> $REPORT_FILE
          echo "**Commit:** ${{ github.sha }}" >> $REPORT_FILE
          echo "**Branch:** ${{ github.ref_name }}" >> $REPORT_FILE
          echo "**Timestamp:** $(date)" >> $REPORT_FILE
          echo "" >> $REPORT_FILE

          # Check test results
          if [ -d "e2e/artifacts" ]; then
            echo "## Test Artifacts Summary" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            
            # Count different types of artifacts
            SCREENSHOT_COUNT=$(find e2e/artifacts -name "*.png" 2>/dev/null | wc -l || echo "0")
            VIDEO_COUNT=$(find e2e/artifacts -name "*.mp4" 2>/dev/null | wc -l || echo "0")
            LOG_COUNT=$(find e2e/artifacts -name "*.log" 2>/dev/null | wc -l || echo "0")
            
            echo "- 📸 **Screenshots captured:** $SCREENSHOT_COUNT" >> $REPORT_FILE
            echo "- 🎥 **Videos recorded:** $VIDEO_COUNT" >> $REPORT_FILE  
            echo "- 📝 **Log files:** $LOG_COUNT" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            
            # List all screenshots with details
            if [ $SCREENSHOT_COUNT -gt 0 ]; then
              echo "## Failed Test Screenshots" >> $REPORT_FILE
              echo "" >> $REPORT_FILE
              find e2e/artifacts -name "*.png" | sort | while read screenshot; do
                filename=$(basename "$screenshot")
                echo "- \`$filename\`" >> $REPORT_FILE
              done
              echo "" >> $REPORT_FILE
            fi
            
            # List all videos
            if [ $VIDEO_COUNT -gt 0 ]; then
              echo "## Test Failure Videos" >> $REPORT_FILE
              echo "" >> $REPORT_FILE
              find e2e/artifacts -name "*.mp4" | sort | while read video; do
                filename=$(basename "$video")
                echo "- \`$filename\`" >> $REPORT_FILE
              done
              echo "" >> $REPORT_FILE
            fi
            
            echo "✅ Detailed test report generated"
          else
            echo "⚠️ No artifacts directory found"
          fi

      - name: Upload iOS test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-ios-test-results-${{ github.run_number }}
          path: |
            e2e/artifacts/
            e2e/screenshots/
            detox_*.log
            ios/build/Build/Logs/
            *.log
          retention-days: 30

      - name: Report E2E Test Results
        if: always()
        run: |
          echo "## E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if the previous step failed
          if [ "${{ job.status }}" = "failure" ]; then
            echo "❌ **iOS E2E Tests FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **This PR cannot be merged until E2E tests pass.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details and fix the failing tests." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📸 **Screenshots and videos of failed tests are available in the artifacts.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **iOS E2E Tests PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 All E2E tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following test suites were executed:" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 App Launch Test" >> $GITHUB_STEP_SUMMARY
          echo "- 👋 Onboarding Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 📲 Import Wallet Flow" >> $GITHUB_STEP_SUMMARY
          echo "- 💳 Load Card Flow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Artifacts:** Screenshots, videos, and logs are organized by test case in the artifacts download." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Check the job logs above for detailed test results._" >> $GITHUB_STEP_SUMMARY
